{"version":3,"sources":["logo.svg","services/CourseService.js","components/CourseRowComponent.js","components/CourseTableComponent.js","components/CourseGridComponent.js","containers/CourseListContainer.js","components/ModuleList.js","components/LessonTabs.js","components/CourseEditor.js","components/HomeComponent.js","components/LogicComponent.js","components/WhiteBoard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","course","fetch","method","body","JSON","stringify","headers","then","response","json","courseId","CourseRowComponent","state","editing","props","setEditing","setState","ok","courseService","_id","status","updateCourseTitle","newTitle","prevState","title","className","this","to","onChange","event","target","value","owner","modified","onClick","deleteCourse","React","Component","CourseTableComponent","courses","length","map","key","CourseGridComponent","CourseListContainer","layout","match","params","newCourseTitle","setLayout","history","push","courseToDelete","filter","addCourse","Date","toDateString","theActualNewCourse","actualArrayOfCourses","prevProps","snapshot","console","log","placeholder","ModuleList","LessonTabs","CourseEditor","HomeComponent","LoginComponent","WhiteBoard","path","exact","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4c2a386f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const createCourse = (course) =>\n  fetch(\"https://wbdv-generic-server.herokuapp.com/api/jannunzi/courses\", {\n    method: 'POST',\n    body: JSON.stringify(course),\n    headers: {\n      'content-type': 'application/json'\n    }\n  })\n    .then(response => response.json())\n\nconst updateCourse = (courseId, course) =>\n  fetch(\"https://wbdv-generic-server.herokuapp.com/api/jannunzi/courses/\" + courseId, {\n    method: 'PUT',\n    body: JSON.stringify(course),\n    headers: {\n      'content-type': 'application/json'\n    }\n  })\n    .then(response => response.json())\n\nconst deleteCourse = (courseId) =>\n  fetch(\"https://wbdv-generic-server.herokuapp.com/api/jannunzi/courses/\" + courseId, {\n    method: 'DELETE'\n  })\n    .then(response => response.json())\n\nconst findCourseById = (courseId) => {}\nconst findAllCourses = () =>\n  fetch(\"https://wbdv-generic-server.herokuapp.com/api/jannunzi/courses\")\n    .then(response => response.json())\n\nexport default {\n  createCourse,\n  deleteCourse,\n  findCourseById,\n  findAllCourses,\n  updateCourse\n}\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport courseService from '../services/CourseService'\n\nexport default class CourseRowComponent extends React.Component {\n  state = {\n    editing: false,\n    course: this.props.course\n  }\n\n  setEditing = (editing) =>\n    this.setState({editing: editing})\n\n  ok = () =>\n    courseService.updateCourse(\n      this.state.course._id,\n      this.state.course)\n      .then(status => this.setEditing(false))\n\n  updateCourseTitle = (newTitle) =>\n    this.setState(prevState => ({\n      course: {\n        ...prevState.course,\n        title: newTitle\n      }\n    }))\n\n  render() {\n    return(\n      <tr className={this.state.editing ? 'table-primary' : ''}>\n        <td>\n          {\n            !this.state.editing &&\n              <Link to={`/editor/${this.state.course._id}`}>\n                {this.state.course.title}\n              </Link>\n          }\n          {\n            this.state.editing &&\n            <input\n              className=\"form-control\"\n              onChange={(event) => this.updateCourseTitle(event.target.value)}\n              value={this.state.course.title}/>\n          }\n        </td>\n        <td>{this.state.course.owner}</td>\n        <td>{this.state.course.modified}</td>\n        <td>\n          {\n            !this.state.editing &&\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => this.setEditing(true)}>\n              Edit\n            </button>\n          }\n          {\n            this.state.editing &&\n            <span>\n              <button onClick={this.ok}>\n                Ok</button>\n              <button\n                className=\"btn btn-danger\"\n                onClick={\n                  () => this.props.deleteCourse(this.props.course)}>\n                Delete</button>\n            </span>\n          }\n        </td>\n      </tr>\n    )\n  }\n}\n","import React from \"react\";\nimport CourseRowComponent from \"./CourseRowComponent\";\n\nexport default class CourseTableComponent\n  extends React.Component\n{\n  render() {\n    return(\n      <div>\n        <h3>Course Table {this.props.courses.length}</h3>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>Title</th>\n              <th>Owner</th>\n              <th>Last Modified</th>\n              <th>\n                <button>Sort</button>\n                <button>Grid</button>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n          {\n            this.props.courses.map(course =>\n              <CourseRowComponent\n                deleteCourse={this.props.deleteCourse}\n                key={course._id}\n                course={course}/>\n          )}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\n\nexport default class CourseGridComponent\n  extends React.Component\n{\n  render() {\n    return(\n      <h3>Course Grid {this.props.courses.length}</h3>\n    )\n  }\n}\n","import React from \"react\";\nimport CourseTableComponent from \"../components/CourseTableComponent\";\nimport CourseGridComponent from \"../components/CourseGridComponent\";\nimport courseService from \"../services/CourseService\"\n\nclass CourseListContainer\n  extends React.Component\n{\n  state = {\n    layout: this.props.match.params.layout,\n    courses: [],\n    newCourseTitle: 'New Title ABC'\n  }\n\n  componentDidMount() {\n    courseService.findAllCourses()\n      .then(actualArrayOfCourses =>\n        this.setState({\n          courses: actualArrayOfCourses\n        }))\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if(prevProps.match.params.layout !== this.props.match.params.layout) {\n      this.setState({\n        layout: this.props.match.params.layout\n      })\n    }\n  }\n\n  setLayout = (layout) => {\n    this.props.history.push(`/${layout}/courses`)\n  }\n\n  deleteCourse = (courseToDelete) =>\n    courseService.deleteCourse(courseToDelete._id)\n      .then(status => this.setState(prevState => ({\n        courses: prevState\n          .courses.filter(course => course !== courseToDelete)\n      })))\n\n  addCourse = (title) =>\n    courseService.createCourse({\n      title: title,\n      owner: 'me',\n      modified: (new Date()).toDateString()\n    })\n      .then(theActualNewCourse =>\n        this.setState((prevState) => {\n        return {\n          courses: [\n            ...prevState.courses,\n            theActualNewCourse\n          ]\n        }\n      }))\n\n  render() {\n\n    console.log(this.props)\n\n    return(\n      <div>\n        <h2>Course List {this.state.courses.length}</h2>\n        <input\n          onChange={(event) => this.setState({\n            newCourseTitle: event.target.value\n          })}\n          value={this.state.newCourseTitle}\n          placeholder=\"Course Title\"/>\n        <button onClick={\n          () => this.addCourse(this.state.newCourseTitle)}>\n          Add Course\n        </button>\n        <br/>\n        {\n          this.state.layout === 'table' &&\n          <div>\n            <button\n              onClick={() =>\n                this.setLayout('grid')}>\n              Grid\n            </button>\n            <CourseTableComponent\n              deleteCourse={this.deleteCourse}\n              courses={this.state.courses}/>\n          </div>\n        }\n        {\n          this.state.layout === 'grid' &&\n          <div>\n            <button\n              onClick={() =>\n                this.setLayout('table')}>\n              Table\n            </button>\n            <CourseGridComponent courses={this.state.courses}/>\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nexport default CourseListContainer\n","import React from \"react\";\n\nconst ModuleList = () =>\n  <div>\n    <h3>Module List</h3>\n    <ul>\n      <li>Module A</li>\n      <li>Module B</li>\n      <li>Module C</li>\n      <li>Module D</li>\n    </ul>\n  </div>\n\nexport default ModuleList\n","import React from \"react\";\n\nconst LessonTabs = () =>\n  <h3>Lesson Tabs</h3>\n\nexport default LessonTabs\n","import React from \"react\";\nimport ModuleList from \"./ModuleList\";\nimport LessonTabs from \"./LessonTabs\";\nimport {Link} from \"react-router-dom\";\n\n// stateless component\nconst CourseEditor = () => {\n  return(\n    <div>\n      <Link to=\"/courses\">\n        Back\n      </Link>\n      <h2>Course Editor</h2>\n\n      <div className=\"row\">\n        <div className=\"col-4\">\n          <ModuleList/>\n        </div>\n        <div className=\"col-8\">\n          <LessonTabs/>\n          <h3>Topic Pills</h3>\n          <h3>Widget List</h3>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default CourseEditor\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst HomeComponent = () =>\n  <div>\n    <h2>Home</h2>\n    <div className=\"list-group\">\n      <Link className=\"list-group-item\" to='/editor'>\n        Course Editor\n      </Link>\n      <Link className=\"list-group-item\" to='/courses'>\n        Course List\n      </Link>\n      <Link className=\"list-group-item\" to='/login'>\n        Login\n      </Link>\n      <Link className=\"list-group-item\" to='/register'>\n        Registration\n      </Link>\n      <Link className=\"list-group-item\" to='/profile'>\n        Profile\n      </Link>\n    </div>\n  </div>\n\nexport default HomeComponent\n","import React from \"react\";\n\nconst LoginComponent = () =>\n  <div>\n    <h2>Login</h2>\n  </div>\n\nexport default LoginComponent\n","import React from 'react'\nimport CourseListContainer from \"../containers/CourseListContainer\";\nimport CourseEditor from \"./CourseEditor\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport HomeComponent from \"./HomeComponent\";\nimport LoginComponent from \"./LogicComponent\";\n\nclass WhiteBoard extends React.Component {\n  render() {\n    return(\n      <BrowserRouter>\n        <div>\n          <h1>WhiteBoard !!!!</h1>\n\n          <Route path=\"/login\" exact={true} component={LoginComponent}/>\n\n          {/*TODO: port over registraion, profile components*/}\n\n          <Route\n            path='/'\n            exact={true}\n            component={HomeComponent}\n          />\n\n          <Route\n            path='/courses'\n            exact={true}\n            component={CourseListContainer}/>\n\n          <Route\n            path='/:layout/courses'\n            exact={true}\n            component={CourseListContainer}/>\n\n          <Route\n            path='/editor'\n            exact={true}\n            component={CourseEditor}/>\n\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default WhiteBoard\n","import React from 'react';\nimport logo from './logo.svg';\n// import './App.css';\nimport WhiteBoard from \"./components/WhiteBoard\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <WhiteBoard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}